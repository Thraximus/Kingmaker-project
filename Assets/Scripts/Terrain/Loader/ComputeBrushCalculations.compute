// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SmoothManipultionTool
#pragma kernel HardManipultionTool
#pragma kernel NoiseManipultionTool
#pragma kernel JaggedManipultionTool

float brushWidth;
float brushHeight;
float realBrushStrenght;
float distPercentX;
float distPercentY;

struct brushPixel
{
    int xPos;
    int yPos;
    float pixelBrushStrength;
};

RWStructuredBuffer<brushPixel> loadedBrush;

[numthreads(64,1,1)]
void SmoothManipultionTool (uint3 id : SV_DispatchThreadID)
{        
    // First the alogirthm finds the center of the image, then it calculates the distance between the center and current pixel, 
    // then it finds the percentile of how far its away from the center (the closer the pixel is to the centre the higher the %) 
    // and finaly itscales the brush strength acording the the aforementioned percentile
    float brushCenterX = brushWidth/2;
    float brushCenterY = brushHeight/2;

    float pixelCenterDistanceX = brushCenterX - abs(loadedBrush[id.x].xPos);
    float pixelCenterDistanceY = brushCenterY - abs(loadedBrush[id.x].yPos);

    float distPercentX =  (pixelCenterDistanceX/brushCenterX) * 100;
    float distPercentY =  (pixelCenterDistanceY/brushCenterY) * 100;

    loadedBrush[id.x].pixelBrushStrength = (loadedBrush[id.x].pixelBrushStrength * distPercentX) / 100;
    loadedBrush[id.x].pixelBrushStrength = (loadedBrush[id.x].pixelBrushStrength * distPercentY) / 100;
}


[numthreads(64,1,1)]
void HardManipultionTool (uint3 id : SV_DispatchThreadID)
{        
    // returns values as is


}

[numthreads(64,1,1)]
void JaggedManipultionTool (uint3 id : SV_DispatchThreadID)
{        
    // returns values as is
    if (fmod(id.x,2)== 0)
    {
        loadedBrush[id.x].pixelBrushStrength = loadedBrush[id.x].pixelBrushStrength/2.0;
    }

    if (fmod(id.x,3) == 0)
    {
        loadedBrush[id.x].pixelBrushStrength = loadedBrush[id.x].pixelBrushStrength* 1.5;
    }
}


[numthreads(64,1,1)]
void NoiseManipultionTool (uint3 id : SV_DispatchThreadID) // TODO: FIX DOESNT WOK
{        
    // returns values as is
    if (fmod(id.x,2)== 0)
    {
        float something = loadedBrush[id.x].xPos/50.0;
        float absPoint = abs(something);
        float absPointTimes =  absPoint*2;
        loadedBrush[id.x].pixelBrushStrength = loadedBrush[id.x].pixelBrushStrength / absPointTimes;
    }

    if (fmod(id.x,3) == 0)
    {
        float point2 = loadedBrush[id.x].yPos/50.0;
        float absPoint2 = abs(point2);
        float absPointTimes2 =  absPoint2*2;
        loadedBrush[id.x].pixelBrushStrength = loadedBrush[id.x].pixelBrushStrength * absPointTimes2;
    }


    
}
