// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
float brushWidth;
float brushHeight;
float realBrushStrenght;
float distPercentX;
float distPercentY;

struct brushPixel
{
    int xPos;
    int yPos;
    float pixelBrushStrength;
};

RWStructuredBuffer<brushPixel> loadedBrush;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{        
    brushPixel pixel = loadedBrush[id.x];

    float brushCenterX = brushWidth/2;
    float brushCenterY = brushHeight/2;

    float pixelCenterDistanceX = brushCenterX - abs(pixel.xPos);
    float pixelCenterDistanceY = brushCenterY - abs(pixel.yPos);

    float distPercentX =  (pixelCenterDistanceX/brushCenterX) * 100;
    float distPercentY =  (pixelCenterDistanceY/brushCenterY) * 100;

    pixel.pixelBrushStrength = (pixel.pixelBrushStrength * distPercentX) / 100;
    pixel.pixelBrushStrength = (pixel.pixelBrushStrength * distPercentY) / 100;

    loadedBrush[id.x] = pixel;
}
